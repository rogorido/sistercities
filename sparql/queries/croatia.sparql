SELECT DISTINCT ?origincityLabel ?origincountry ?originlat ?originlong ?originpopulation
                ?sistercityLabel ?destinationlat ?destinationlong ?destinationpopulation
                ?destination_countryLabel ?dist ?eu
WHERE {

  # selection of the origincity with coordinates and population in a subquery
  {
  SELECT DISTINCT ?origincity (SAMPLE(?lat_o) as ?originlat) (SAMPLE(?lon_o) as ?originlong) ?originpopulation WHERE {
    ?origincity (wdt:P31/wdt:P279*) wd:Q486972 ; 
                                    wdt:P17 wd:Q224  .           # ... in Croatia
    
    # get the coordinates of origincity 
    ?origincity p:P625 ?statement .                             # is there a coordinate-location statement?
    ?statement psv:P625 ?origin_coordinate_node .               # ... which are the coordinates?
    ?origin_coordinate_node wikibase:geoLatitude  ?lat_o .      # ... extract the latitude
    ?origin_coordinate_node wikibase:geoLongitude ?lon_o .      # ... extract the longitude 

    OPTIONAL { ?origincity wdt:P1082 ?originpopulation. } }     # get the population of origincity if there is any data
    
    GROUP BY ?origincity ?originpopulation
  }
  
  # look for infos about sister cities of origincity
  ?origincity p:P190 ?sistercity_statement .
  ?sistercity_statement ps:P190 ?sistercity .

  # get the coordinates of sistercity 
  ?sistercity p:P625 ?destination_coordinate_node_statement .
  ?destination_coordinate_node_statement psv:P625 ?destination_coordinate_node .
  ?destination_coordinate_node wikibase:geoLatitude ?destinationlat .
  ?destination_coordinate_node wikibase:geoLongitude ?destinationlong .

  # get the country of sistercity 
  ?sistercity wdt:P17 ?destination_country .

  # is the destination_country a EU country?
  OPTIONAL { ?destination_country p:P31 ?eustatement .
             ?eustatement ps:P31 wd:Q185441 . }
  BIND(IF(BOUND(?eustatement), "EU", "Non-EU") as ?eu)

  OPTIONAL { ?sistercity wdt:P1082 ?destinationpopulation. }  # get the population of sistercity if there is any data

  # calculate the distance between the two cities
  ?sistercity wdt:P625 ?coord_d .
  ?origincity wdt:P625 ?coord_o .
  BIND(ROUND(geof:distance(?coord_o, ?coord_d)) as ?dist)

  # not very elegant, but we want to avoid timeouts...
  BIND("Croatia" as ?origincountry)

  SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
}
